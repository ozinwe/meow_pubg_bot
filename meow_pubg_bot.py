import os
import logging
import json
import io
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from PIL import Image, ImageDraw, ImageFont
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from aiogram.filters import CommandStart

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
ADMIN_USERNAME = "sunMILANA"

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

cap_chat_url = None
registration_data = {}
reserved_teams = []
used_users = set()
connected_events = {}

TEMPLATE_IMAGE_PATH = "template.png"
FONT_PATH = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"
FONT_SIZE = 28

def is_admin(message: Message):
    return message.from_user.id == ADMIN_ID or message.from_user.username == ADMIN_USERNAME

def buy_access_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø", url="https://t.me/sunMILANA")]
    ])

@dp.message(CommandStart())
async def start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø MEOW PUBG BOT üêæ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥, –≤—Å—Ç–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä—É—Ñ–æ–≤.\n\n"
        "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è TEAM @–∫–∞–ø–∏—Ç–∞–Ω ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É\n"
        "/—Ç–∏–º–ª–∏—Å—Ç ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–ª–æ—Ç—ã\n"
        "–û—Ç–ø—Ä–∞–≤—å —à–∞–±–ª–æ–Ω + —Å—Å—ã–ª–∫—É –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É ‚Äî —è –≤—Å—Ç–∞–≤–ª—é —Ç–µ–∫—Å—Ç\n"
        "/autocheck ‚Äî –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä—É—Ñ–æ–≤ (–≤ –≥—Ä—É–ø–ø–µ)\n\n"
    )

    if is_admin(message):
        text += (
            "üîê <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n"
            "/setcapchat <—Å—Å—ã–ª–∫–∞> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–ø-—á–∞—Ç\n"
            "/—Ä–µ–∑–µ—Ä–≤ TEAM @–∫–∞–ø ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ä–µ–∑–µ—Ä–≤\n"
            "/–ª–∏—Å—Ç_—Ä–µ–≥ ‚Äî –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "/–ª–∏—Å—Ç_—Ä–µ–∑–µ—Ä–≤ ‚Äî —Ä–µ–∑–µ—Ä–≤\n"
            "/approvechat -100123456789 ‚Äî –¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É\n"
            "/broadcast —Ç–µ–∫—Å—Ç ‚Äî —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "/resetlimit ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        )
    await message.answer(text, parse_mode="HTML")
@dp.message(F.text.startswith("/setcapchat"))
async def set_capchat(message: Message):
    global cap_chat_url
    if not is_admin(message): return
    parts = message.text.split()
    if len(parts) == 2:
        cap_chat_url = parts[1]
        await message.answer("‚úÖ –ö—ç–ø-—á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@dp.message(F.text.startswith("/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"))
async def register_team(message: Message):
    if message.from_user.id in used_users and not is_admin(message):
        await message.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.", reply_markup=buy_access_keyboard())
        return
    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è TEAM_NAME @username")
        return
    team_name, cap_username = parts[1], parts[2]
    slot = 5
    while str(slot) in registration_data:
        slot += 1
    registration_data[str(slot)] = {
        "team": team_name,
        "cap": cap_username,
        "cap_id": message.from_user.id,
        "status": "‚è≥"
    }
    used_users.add(message.from_user.id)
    await message.answer(f"‚úÖ {team_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–ª–æ—Ç {slot}")
    if cap_chat_url:
        await bot.send_message(chat_id=cap_chat_url, text=f"–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <b>{team_name}</b> ‚Äî {cap_username}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{slot}"),
                 InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{slot}")]
            ]))

@dp.callback_query(F.data.startswith("confirm_"))
async def confirm_slot(callback: CallbackQuery):
    slot = callback.data.split("_")[1]
    data = registration_data.get(slot)
    if not data or callback.from_user.id != data["cap_id"]:
        return await callback.answer("–í—ã –Ω–µ –∫–∞–ø–∏—Ç–∞–Ω —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
    registration_data[slot]["status"] = "‚úÖ"
    await callback.message.edit_text(f"‚úÖ {data['team']} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ —Å–ª–æ—Ç {slot}")

@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_slot(callback: CallbackQuery):
    slot = callback.data.split("_")[1]
    data = registration_data.get(slot)
    if not data or callback.from_user.id != data["cap_id"]:
        return await callback.answer("–í—ã –Ω–µ –∫–∞–ø–∏—Ç–∞–Ω —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", show_alert=True)
    registration_data.pop(slot)
    await callback.message.edit_text(f"‚ùå {data['team']} –æ—Ç–∫–∞–∑–∞–ª–∞—Å—å –æ—Ç —Å–ª–æ—Ç–∞ {slot}.")
    if reserved_teams:
        reserve = reserved_teams.pop(0)
        registration_data[slot] = reserve
        await bot.send_message(chat_id=cap_chat_url, text=f"–†–µ–∑–µ—Ä–≤ –ø–æ–¥–∫–ª—é—á—ë–Ω: {reserve['team']} ‚Äî {reserve['cap']}")

@dp.message(F.text == "/—Ç–∏–º–ª–∏—Å—Ç")
async def team_list(message: Message):
    text = "\n".join([f"–°–ª–æ—Ç {k}: {v['team']} ‚Äî {v['status']}" for k, v in registration_data.items()])
    await message.answer(text or "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

@dp.message(F.text.startswith("/—Ä–µ–∑–µ—Ä–≤"))
async def add_reserve(message: Message):
    if not is_admin(message): return
    parts = message.text.split(" ", 2)
    if len(parts) < 3:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /—Ä–µ–∑–µ—Ä–≤ TEAM_NAME @cap")
    reserved_teams.append({"team": parts[1], "cap": parts[2]})
    await message.answer("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–µ–∑–µ—Ä–≤")

@dp.message(F.text == "/–ª–∏—Å—Ç_—Ä–µ–∑–µ—Ä–≤")
async def list_reserve(message: Message):
    if not is_admin(message): return
    text = "\n".join([f"{i+1}. {t['team']} ‚Äî {t['cap']}" for i, t in enumerate(reserved_teams)])
    await message.answer(text or "–†–µ–∑–µ—Ä–≤ –ø—É—Å—Ç")

@dp.message(F.text == "/–ª–∏—Å—Ç_—Ä–µ–≥")
async def list_reg(message: Message):
    if not is_admin(message): return
    text = json.dumps(registration_data, indent=2, ensure_ascii=False)
    await message.answer(f"<pre>{text}</pre>", parse_mode="HTML")

@dp.message(F.photo)
async def handle_photo_template(message: Message):
    if not is_admin(message): return
    file = await bot.get_file(message.photo[-1].file_id)
    downloaded = await bot.download_file(file.file_path)
    with open("template.png", "wb") as f:
        f.write(downloaded.read())
    await message.answer("‚úÖ –®–∞–±–ª–æ–Ω –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É.")

@dp.message(F.text.contains("docs.google.com"))
async def fill_image_from_sheet(message: Message):
    if not is_admin(message): return
    spreadsheet_id = message.text.split("/d/")[1].split("/")[0]
    creds = Credentials.from_service_account_file("credentials.json", scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"])
    values = build("sheets", "v4", credentials=creds).spreadsheets().values().get(spreadsheetId=spreadsheet_id, range="A2:D19").execute().get("values", [])
    img = Image.open("template.png")
    draw = ImageDraw.Draw(img)
    font = ImageFont.truetype(FONT_PATH, FONT_SIZE)
    for i, row in enumerate(values):
        name, pos, kills, total = row + [""] * (4 - len(row))
        y = 220 + (i % 9) * 65
        x = 100 if i < 9 else 700
        draw.text((x, y), f"{name}  {pos}  {kills}  {total}", font=font, fill=(255,255,255))
    title = values[0][0] if values else "meow"
    out_path = f"{title}_meow.png"
    img.save(out_path)
    await message.answer_photo(InputFile(out_path), caption=f"‚úÖ –¢–∞–±–ª–∏—Ü–∞: {title}_meow.png")

@dp.message(F.text.startswith("/autocheck"))
async def activate_autocheck(message: Message):
    if message.chat.type != "supergroup":
        return await message.answer("–¢–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
    connected_events[message.chat.id] = 0
    await message.answer("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞")

@dp.message(F.text.contains("http"))
async def check_pruf_links(message: Message):
    if message.chat.id not in connected_events:
        return
    links = [x for x in message.text.split() if x.startswith("http")]
    if len(links) < 4:
        return
    failed = []
    for link in links:
        if "t.me" in link and "@" not in link:
            failed.append("Telegram")
        if "youtube.com" in link and not "@" in link:
            failed.append("YouTube")
        if "instagram.com" in link:
            pass
    if failed:
        await message.reply(f"‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞: {', '.join(set(failed))}")
    else:
        await message.reply("‚úÖ –ü—Ä—É—Ñ—ã –ø—Ä–æ–π–¥–µ–Ω—ã")

@dp.message(F.text.startswith("/approvechat"))
async def approve_chat(message: Message):
    if not is_admin(message): return
    chat_id = int(message.text.split()[1])
    connected_events[chat_id] = 0
    await message.answer(f"‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω —á–∞—Ç: {chat_id}")

@dp.message(F.text.startswith("/broadcast"))
async def broadcast_to_users(message: Message):
    if not is_admin(message): return
    text = message.text.replace("/broadcast", "").strip()
    for uid in used_users:
        try:
            await bot.send_message(uid, f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{text}")
        except: pass
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@dp.message(F.text == "/resetlimit")
async def reset_limits(message: Message):
    if is_admin(message):
        used_users.clear()
        await message.answer("‚úÖ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã")

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
